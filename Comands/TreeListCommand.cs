 public class TreeListCommand : ICommand
{
        private readonly IFileSystem _fileSystem;
        private readonly int _depth;
        private readonly string _folderSymbol;
        private readonly string _fileSymbol;
        private readonly string _indentationSymbol;

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –≥–ª—É–±–∏–Ω—ã, —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫, –∏ —Å–∏–º–≤–æ–ª–∞ –æ—Ç—Å—Ç—É–ø–∞
        public TreeListCommand(IFileSystem fileSystem, int depth = 1, 
                               string folderSymbol = "üìÅ", string fileSymbol = "üìÑ", string indentationSymbol = "--")
        {
            _fileSystem = fileSystem;
            _depth = depth;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
            _folderSymbol = folderSymbol;
            _fileSymbol = fileSymbol;
            _indentationSymbol = indentationSymbol;
        }

        public void Execute()
        {
            try
            {
                ListDirectoryTree(_fileSystem.CurrentDirectory, 0);  // –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–æ—Ä–Ω—è (–≥–ª—É–±–∏–Ω–∞ 0)
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        private void ListDirectoryTree(string path, int currentDepth)
        {
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã, –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ö–æ–¥
            if (currentDepth >= _depth) return;

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ç–∞–ª–æ–≥–∞
            var directories = Directory.GetDirectories(path);
            var files = Directory.GetFiles(path);

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥
            Console.WriteLine($"{new string(_indentationSymbol[0], currentDepth * 2)}{_folderSymbol} {Path.GetFileName(path)}\\");

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
            foreach (var directory in directories)
            {
                ListDirectoryTree(directory, currentDepth + 1);  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥
            }

            // –í—ã–≤–æ–¥–∏–º —Ñ–∞–π–ª—ã
            foreach (var file in files)
            {
                Console.WriteLine($"{new string(_indentationSymbol[0], (currentDepth + 1) * 2)}{_fileSymbol} {Path.GetFileName(file)}");
            }
        }
}